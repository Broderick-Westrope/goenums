package auth

import "fmt"

// This file is generated by goenums; DO NOT EDIT

//go:generate stringer -type=Role -output=role_string.go
type Role struct {
	role
}

type role int

const (
	unknownRole role = iota
	adminRole
	userRole
	guestRole
)

var (
	strRoleArray = [...]string{
		adminRole: "ADMIN",
		userRole:  "USER",
		guestRole: "GUEST",
	}

	typeRoleMap = map[string]role{
		"ADMIN": adminRole,
		"USER":  userRole,
		"GUEST": guestRole,
	}
)

func (r role) String() string {
	return strRoleArray[r]
}

func ParseRole(a any) Role {
	switch v := a.(type) {
	case Role:
		return v
	case string:
		return Role{stringToRole(v)}
	case fmt.Stringer:
		return Role{stringToRole(v.String())}
	case int:
		return Role{role(v)}
	case int64:
		return Role{role(int(v))}
	case int32:
		return Role{role(int(v))}
	}
	return Role{unknownRole}
}

func stringToRole(s string) role {
	if v, ok := typeRoleMap[s]; ok {
		return v
	}
	return unknownRole
}

func (r role) IsValid() bool {
	return r >= role(1) && r <= role(len(strRoleArray))
}

type RoleContainer struct {
	UNKNOWN Role
	ADMIN   Role
	USER    Role
	GUEST   Role
}

var Roles = RoleContainer{
	UNKNOWN: Role{unknownRole},
	ADMIN:   Role{adminRole},
	USER:    Role{userRole},
	GUEST:   Role{guestRole},
}

func (c RoleContainer) All() []Role {
	return []Role{
		c.ADMIN,
		c.USER,
		c.GUEST,
	}
}

func (r *Role) MarshalJSON() ([]byte, error) {
	return []byte(`"` + r.String() + `"`), nil
}

func (r *Role) UnmarshalJSON(b []byte) error {
	*r = ParseRole(string(b))
	return nil
}
