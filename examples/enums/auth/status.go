package auth

import "fmt"

// This file is generated by goenums; DO NOT EDIT

//go:generate stringer -type=Status -output=status_string.go
type Status struct {
	status
}

type status int

const (
	unknownStatus status = iota
	activeStatus
	inactiveStatus
	suspendedStatus
)

var (
	strStatusArray = [...]string{
		activeStatus:    "ACTIVE",
		inactiveStatus:  "INACTIVE",
		suspendedStatus: "SUSPENDED",
	}

	typeStatusMap = map[string]status{
		"ACTIVE":    activeStatus,
		"INACTIVE":  inactiveStatus,
		"SUSPENDED": suspendedStatus,
	}
)

func (s status) String() string {
	return strStatusArray[s]
}

func ParseStatus(a any) Status {
	switch v := a.(type) {
	case Status:
		return v
	case string:
		return Status{stringToStatus(v)}
	case fmt.Stringer:
		return Status{stringToStatus(v.String())}
	case int:
		return Status{status(v)}
	case int64:
		return Status{status(int(v))}
	case int32:
		return Status{status(int(v))}
	}
	return Status{unknownStatus}
}

func stringToStatus(s string) status {
	if v, ok := typeStatusMap[s]; ok {
		return v
	}
	return unknownStatus
}

func (s status) IsValid() bool {
	return s >= status(1) && s <= status(len(strStatusArray))
}

type StatusContainer struct {
	UNKNOWN   Status
	ACTIVE    Status
	INACTIVE  Status
	SUSPENDED Status
}

var Statuses = StatusContainer{
	UNKNOWN:   Status{unknownStatus},
	ACTIVE:    Status{activeStatus},
	INACTIVE:  Status{inactiveStatus},
	SUSPENDED: Status{suspendedStatus},
}

func (c StatusContainer) All() []Status {
	return []Status{
		c.ACTIVE,
		c.INACTIVE,
		c.SUSPENDED,
	}
}

func (s *Status) MarshalJSON() ([]byte, error) {
	return []byte(`"` + s.String() + `"`), nil
}

func (s *Status) UnmarshalJSON(b []byte) error {
	*s = ParseStatus(string(b))
	return nil
}
