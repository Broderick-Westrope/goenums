package auth

import "fmt"

// This file is generated by goenums; DO NOT EDIT

//go:generate stringer -type=AccountStatus -output=accountStatus_string.go
type AccountStatus struct {
	accountStatus
}

type accountStatus int

const (
	unknownAccountStatus accountStatus = iota
	activeAccountStatus
	inactiveAccountStatus
	suspendedAccountStatus
)

var (
	strAccountStatusArray = [...]string{
		activeAccountStatus:    "ACTIVE",
		inactiveAccountStatus:  "INACTIVE",
		suspendedAccountStatus: "SUSPENDED",
	}

	typeAccountStatusMap = map[string]accountStatus{
		"ACTIVE":    activeAccountStatus,
		"INACTIVE":  inactiveAccountStatus,
		"SUSPENDED": suspendedAccountStatus,
	}
)

func (a accountStatus) String() string {
	return strAccountStatusArray[a]
}

func ParseAccountStatus(a any) AccountStatus {
	switch v := a.(type) {
	case AccountStatus:
		return v
	case string:
		return AccountStatus{stringToAccountStatus(v)}
	case fmt.Stringer:
		return AccountStatus{stringToAccountStatus(v.String())}
	case int:
		return AccountStatus{accountStatus(v)}
	case int64:
		return AccountStatus{accountStatus(int(v))}
	case int32:
		return AccountStatus{accountStatus(int(v))}
	}
	return AccountStatus{unknownAccountStatus}
}

func stringToAccountStatus(s string) accountStatus {
	if v, ok := typeAccountStatusMap[s]; ok {
		return v
	}
	return unknownAccountStatus
}

func (a accountStatus) IsValid() bool {
	return a >= accountStatus(1) && a <= accountStatus(len(strAccountStatusArray))
}

type AccountStatusContainer struct {
	UNKNOWN   AccountStatus
	ACTIVE    AccountStatus
	INACTIVE  AccountStatus
	SUSPENDED AccountStatus
}

var AccountStatuses = AccountStatusContainer{
	UNKNOWN:   AccountStatus{unknownAccountStatus},
	ACTIVE:    AccountStatus{activeAccountStatus},
	INACTIVE:  AccountStatus{inactiveAccountStatus},
	SUSPENDED: AccountStatus{suspendedAccountStatus},
}

func (c AccountStatusContainer) All() []AccountStatus {
	return []AccountStatus{
		c.ACTIVE,
		c.INACTIVE,
		c.SUSPENDED,
	}
}

func (a *AccountStatus) MarshalJSON() ([]byte, error) {
	return []byte(`"` + a.String() + `"`), nil
}

func (a *AccountStatus) UnmarshalJSON(b []byte) error {
	*a = ParseAccountStatus(string(b))
	return nil
}
