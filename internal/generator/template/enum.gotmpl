package {{.SnakePackage}}

import "fmt"

// This file is generated by goenums; DO NOT EDIT

type {{.CamelType}} struct {
    {{.LowerCamelType}}
}

type {{.LowerCamelType}} int

const (
{{- range $index, $enum := .Enums}}
    {{- if eq $index 0}}
    unknown{{$.CamelType}} {{$.LowerCamelType}} = iota
    {{$enum.LowerCamelValue}}{{$.CamelType}}
    {{- else}}
    {{$enum.LowerCamelValue}}{{$.CamelType}}
    {{- end}}
{{- end}}
)

var (
    str{{.CamelType}}Array = [...]string{
{{- range $index, $enum := .Enums}}
         {{$enum.LowerCamelValue}}{{$.CamelType}}: "{{$enum.ScreamingSnakeValue}}",
{{- end}}
    }

    type{{.CamelType}}Map = map[string]{{.LowerCamelType}}{
{{- range $index, $enum := .Enums}}
         "{{$enum.ScreamingSnakeValue}}": {{$enum.LowerCamelValue}}{{$.CamelType}},
{{- end}}
    }
)

func ({{.MethodReceiver}} {{.LowerCamelType}}) String() string {
    return str{{.CamelType}}Array[{{.MethodReceiver}}]
}

func Parse{{.CamelType}}(a any) {{.CamelType}} {
    switch v := a.(type) {
    case {{.CamelType}}:
        return v
    case string:
        return {{.CamelType}}{ stringTo{{.CamelType}}(v) }
    case fmt.Stringer:
        return {{.CamelType}}{stringTo{{.CamelType}}(v.String()) }
    case int:
		return {{.CamelType}}{ {{.LowerCamelType}}(v) } 
	case int64:
		return {{.CamelType}}{ {{.LowerCamelType}}(int(v)) } 
	case int32:
		return {{.CamelType}}{ {{.LowerCamelType}}(int(v)) } 
	}
    return {{.CamelType}}{ unknown{{.CamelType}} }
}

func stringTo{{.CamelType}}(s string) {{.LowerCamelType}} {
    if v, ok := type{{.CamelType}}Map[s]; ok {
        return v
    }
    return unknown{{.CamelType}}
}

func ({{.MethodReceiver}} {{.LowerCamelType}}) IsValid() bool {
    return {{.MethodReceiver}} >= {{.LowerCamelType}}(1) && {{.MethodReceiver}} <= {{.LowerCamelType}}(len(str{{.CamelType}}Array))
}

type {{.CamelType}}Container struct {
    UNKNOWN {{.CamelType}}
   {{- range $index, $enum := .Enums}}
    {{$enum.ScreamingSnakeValue}} {{$.CamelType}}
{{- end}}
}

var {{.CamelTypePlural}} = {{.CamelType}}Container{
    UNKNOWN:{{.CamelType}} { unknown{{.CamelType}} },
{{- range $index, $enum := .Enums}}
    {{$enum.ScreamingSnakeValue}}:  {{$.CamelType}} { {{$enum.LowerCamelValue}}{{$.CamelType}} },
{{- end}}
}

func (c {{.CamelType}}Container) All() []{{.CamelType}} {
    return []{{.CamelType}}{
{{- range $index, $enum := .Enums}}
        c.{{$enum.ScreamingSnakeValue}},
{{- end}}
    }
}

func ({{.MethodReceiver}} *{{.CamelType}}) MarshalJSON() ([]byte, error) {
	return []byte(`"` + {{.MethodReceiver}}.String() + `"`), nil
}

func ({{.MethodReceiver}} *{{.CamelType}}) UnmarshalJSON(b []byte) error {
	*{{.MethodReceiver}} = Parse{{.CamelType}}(string(b))
	return nil
}